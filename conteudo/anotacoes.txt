
MODULO 1,2,3

typescript adiciona confiabilidade ao programa, diminui a quantidade de bugs, consequentemente perdemos menos tempos com debug

o comando node index.js roda no terminal cmd/kernel
o comando tsc index.ts rodad no console virtual web

type annotation é quando definimos um tipo de dado manualmente
type inference é quando o typescript identifica e define o tipo de dado para nós, como o javascript faz

o comando tsc -w serve para compilar automaticamente

arrays tem tipos fixos, tipo, arrays de numeros, array de strings => number[], string[], boolean[]

quando uma propriedade é opcional precisamos criar uma validação, com a condicional if, se x for != de undefined

union type é quando um item pode receber mais de um tipo de dado, por exemplo const ano: string | number;

type alias é criar um tipo de dado que pode ser usado como type annotation
type ID = number | string
é usado para diminuir sentenças e reduzir a sintaxe de funções

interfaces é como criar um tipo de dado, com meus proprios parametros e que pode ser usado como type annotation de variaveis e afins, ou seja, é bem parecido com type alias

a unica diferença entra type alias e interface é que a interface pode ser alterada ao longo do codigo, ja o alias não

type primitive é quando uma variavel tem um valor fixo no seu tipo, por exemplo 
let gasolina:2.50


MODULO 4 - Narrowing

sao estratégias em TS que permite identificar o tipo de dado e com isso tomar uma decisão baseada no tipo que foi indentificado, este método é legal para atuar em tipos que podem ser imprevisiveis e queremos executar algo em cada uma das possibilidades, além disso é fundamental para evitar erros!

MODULO 5 - Funcoes

rest operator é utilizado como parametro de funcao para receber mais de um valor do msm tipo

os parâmetros default precisa estar sempre por ultimo na lista de argumentos

MODULO 5 - OBJETOS

readonly string, são string que são de leitura, ou seja, não pode ser modificada diretamente, apenas por métodos espaciais que percorrem arrays

tuplas são estrutura de dados parecidos com arrays, a unica diferença é que uma tupla trabalha com tipos de dados específicos, e os arrays não
let list:number[] = [1, 2, 3]; //Exemplo com Array
let list:string[] = ['oi', 'eu', 'ruan'] //Exemplo com Array
let llist:boolean[] = [true, false, false]; //Exemplo com Array
let list: [string, number, string, boolean, number, string];  //Exemplo com tuplas

type == tuplas


