
MODULO 1,2,3

typescript adiciona confiabilidade ao programa, diminui a quantidade de bugs, consequentemente perdemos menos tempos com debug

o comando node index.js roda no terminal cmd/kernel
o comando tsc index.ts rodad no console virtual web

type annotation é quando definimos um tipo de dado manualmente
type inference é quando o typescript identifica e define o tipo de dado para nós, como o javascript faz

o comando tsc -w serve para compilar automaticamente

arrays tem tipos fixos, tipo, arrays de numeros, array de strings => number[], string[], boolean[]

quando uma propriedade é opcional precisamos criar uma validação, com a condicional if, se x for != de undefined

union type é quando um item pode receber mais de um tipo de dado, por exemplo const ano: string | number;

type alias é criar um tipo de dado que pode ser usado como type annotation
type ID = number | string
é usado para diminuir sentenças e reduzir a sintaxe de funções

interfaces é como criar um tipo de dado, com meus proprios parametros e que pode ser usado como type annotation de variaveis e afins, ou seja, é bem parecido com type alias

a unica diferença entra type alias e interface é que a interface pode ser alterada ao longo do codigo, ja o alias não

type primitive é quando uma variavel tem um valor fixo no seu tipo, por exemplo 
let gasolina:2.50


MODULO 4 - Narrowing

sao estratégias em TS que permite identificar o tipo de dado e com isso tomar uma decisão baseada no tipo que foi indentificado, este método é legal para atuar em tipos que podem ser imprevisiveis e queremos executar algo em cada uma das possibilidades, além disso é fundamental para evitar erros!

MODULO 5 - Funcoes

rest operator é utilizado como parametro de funcao para receber mais de um valor do msm tipo
rest operator é muito bom para deixar como parametro de funçao e receber valores que vão interagir um com o outro por meio de string

os parâmetros default precisa estar sempre por ultimo na lista de argumentos

MODULO 6 - objetos

readonly string, são string que são de leitura, ou seja, não pode ser modificada diretamente, apenas por métodos espaciais que percorrem arrays

tuplas são estrutura de dados parecidos com arrays, a unica diferença é que uma tupla trabalha com tipos de dados específicos, e os arrays não
let list:number[] = [1, 2, 3]; //Exemplo com Array
let list:string[] = ['oi', 'eu', 'ruan'] //Exemplo com Array
let llist:boolean[] = [true, false, false]; //Exemplo com Array
let list: [string, number, string, boolean, number, string];  //Exemplo com tuplas

type == tuplas

MODULO 7 - criação de tipos

possibilidade de gerar novos tipos de dados em TS, isso é massa deixa a manuntenção do projeto mais simples, mesmo tendo que criar mais tipos no inicio do projeto, com um projeto de tipos criados, sua manuntenção fica mais simples, isto é, se gasta mais tempo desenvolvendo e menos tempo corrigindo bugs

usar novos tipos de operadores logicos

interface con genercis é bom pra criar novos tipos de dados             

MODULO 8 - CLASSES

o sinal de ! apos a propriedade diz ao typescript que esta propriedade ainda vai ser usada

os getters leem propriedade e os setters atribuem propriedade

implements são quando classes herdam interfaces para usar o seus métodos

para sobrescrever métodos de uma mesma classe, é so reescrever o método com o mesmo nome e mudar o conteudo 

Visibilidade em Typescript é semelhante aos modificadores de acesso em C#
public : não precisa declarar / qualquer propriedade ou metodo da classe pai é acessivel pela classe filha
protected : para acessar as propriedades protected da classe, a classe filha precisar criar métodos para isso
private: apenas e apenas a classe que delcarou o método pode utilizar e ainda assim precisa de métodos para serem acessa-la

OVERRIDE de métodoso
somente reescrever os métodos com o mesmo nome e mudar seu conteudo

 Os getters e setters permitem controlar o acesso às propriedades de uma classe
 
para cada propriedade da classe o getter retorna um valor
para cad propriedadae da classe o setter atualizar um valor

o getter é chamado de acessador 
o setter é chamado de mutador

throw new erro é uma função que lança um erro, o seu tipo de retorno é um never, esse retorno são para funções que nunca retornan um valor, e sim ecerram a execução de um programa

MODULO 9 - DECORATORS

Os decorators são um dos recursos mais poderosos oferecido pelo TypeScript, tendo como um dos principais objetivos ampliar funcionalidades de classes e métodos de forma simples e limpa. 

Atualmente, os decorators são uma proposta para JavaScript e estão disponíveis como um recurso experimental no TypeScript. 

Mesmo sendo um recurso experimental, eles já estão presentes em grandes projetos de código aberto, como o Angular e Inversify.

Por ser um recurso experimental, para ser possível utilizar no TypeScript, é necessário habilitar no tsconfig.json:

 "experimentalDecorators": true
 
Um decorator é uma declaração especial para adicionar funcionalidades extras a uma 
declaração de classe, 
método, 
acessador, 
propriedade ou 
parâmetro”.


eles utilizam o formato @expression
